initialize() {
	
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeTreeSeq(checkCoalescence=F);
	// need to enter sigma, s, and mu on command line
	//sigma=0.2;
	//s=-0.00001;
	//mu=1e-8; 
	//K
	
	// defineConstant("id",format("%.0f",runif(1,1e6,1e7-1)));
	
	//defineConstant("K", 5);  // carrying-capacity per unit square (roughly)
	defineConstant("SD", sigma);  // sigma_D, the dispersal distance
	defineConstant("SI", sigma);  // sigma_I, the spatial interaction distance
	defineConstant("SM", SI);  // sigma_M, the mate choice distance
	defineConstant("L", 4);    // mean lifetime at stationarity
	// defineConstant("W", 25.0);  // width and height of the simulated area
	defineConstant("G", 1e8);  // genome length
	defineConstant("FECUN", 1/L); // mean fecundity
	defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function
	
	//initializeMutationType("m1", 0.5, "g", s, 2); // gamma
	
	initializeMutationType("m1", 0.5, "f", s); // fixed 
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, G-1);
	initializeMutationRate(mu);
	initializeRecombinationRate(1e-8);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
	i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
	
	// mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
	i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);
	

}

reproduction() {
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) {
		nOff = rpois(1, FECUN);
		for (i in seqLen(nOff)) {
			pos = individual.spatialPosition + rnorm(2, 0, SD);
			if (p1.pointInBounds(pos)) {
				offspring = subpop.addCrossed(individual, mate);
				offspring.setSpatialPosition(pos);
			}
		}
	}
	return;
}

1 early() {
	sim.addSubpop("p1", asInteger(K * W * W));
	p1.setSpatialBounds(c(0.0, 0.0, W, W));
	for (ind in p1.individuals) {
		ind.setSpatialPosition(p1.pointUniform());
	}
	i1.evaluate(sim.subpopulations);
}

early() {
	i1.evaluate(p1);
	inds = p1.individuals;
	competition = i1.totalOfNeighborStrengths(inds);
	inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));
	// scale fitness at edges
	inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0);
}

1: late() {
	// to be ready for mate choice
	i2.evaluate(p1);
	if (sim.generation%1000==0){
		cat("still running");
		cat(sim.generation);
	}
}



10000 late() {
	
	// Print the results
	print(SD + " " + sim.generation);
	
	// Output tree sequence
	sim.treeSeqOutput(outpath);
	sim.simulationFinished();
}
